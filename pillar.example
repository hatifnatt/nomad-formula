---
nomad:
  version: 1.2.6
  # control via pillar will Nomad be installed or not
  install: true
  # Installation method selection
  # package, repo - configure official repository (available for Debian and RedHat like systems), then install package
  # binary, archive - download and install precompiled binary from official server or from salt fileserver
  use_upstream: binary
  user: nomad
  group: nomad
  root_user: root
  root_group: root
  bin: /usr/bin/nomad
  backup:
    helper:
      # Install backup helper script or not
      install: true
    # Where to store backups
    dir: /var/lib/nomad/backup
  service:
    name: nomad
    # running / dead
    status: running
    # enabled / disabled
    on_boot_state: enabled
    # When triggering service after configuration changes use reload instead of restart
    reload: false
    # directory where systemd service unit file will be saved
    systemd:
      # do not overwrite service file provided by package
      # but override it completely
      unit_dir: /etc/systemd/system
  shell_completion:
    bash:
      # Install bash completion configuration
      install: true
      package: bash-completion
      dir: /etc/bash_completion.d
  binary:
    # List of packages required for binary installation, i.e. unzip
    # is required to extract archive with nomad binary
    # NOTE: those packages won't be removed with nomad.binary.clean state
    prereq_pkgs:
      - unzip
    # Formula will try download distributive from %download_remote%/%version%/nomad_%version%_linux_amd64.zip
    # You can put archive with nomad on salt-fileserver i.e.
    # /filserver_root/DIST/nomad/1.9.0/nomad_1.9.0_linux_amd64.zip
    # Then you can specify salt://DIST/nomad/ as 'download_remote'
    download_remote: https://releases.hashicorp.com/nomad/
    # File with SHA sums will be downloaded from  %source_hash_remote%/%version%/nomad_%version%_SHA256SUMS
    source_hash_remote: https://releases.hashicorp.com/nomad/
    # Skip checksum verification, by default checksum will be verified.
    # You probably want to disable checksum verification if you download distributive from salt fileserver (salt://...)
    skip_verify: false
    # Temp dir for manipulations with archive
    temp_dir: /tmp/nomad
  package:
    # List of packages required for packages installation, i.e. python3-dnf-plugin-versionlock
    # is required on RedHat family to hold packages
    # NOTE: those packages won't be removed with nomad.package.clean state
    prereq_pkgs: []
    # List of some extra packages to install
    # NOTE: those packages won't be removed with nomad.package.clean state
    pkgs_extra: []
    pkgs:
      - nomad
    hold: false
    update_holds: true
    # only applicable on Debian based systems
    install_recommends: true
  # Start parameters (command line arguments) for nomad, nomad service will be started with this parameters
  # some parameters have their equivalent in configuration file, it is preferable to put parameters in the config file
  # rather than as command line arguments
  params:
    # NOTE first provided path must be file path not directory path,
    # it will be used to save configuration generated by formula
    config:
      - /etc/nomad.d/nomad.json
  tls:
    self_signed: false
    packages:
      - openssl
      - python3-m2crypto
    # If path starts with 'salt://' or '/' value will be used 'as is'
    # file from salt-filserver or local file will be used respectively
    # otherwise file will be searched in 'formula-root/tls/' on salt-fileserver
    key_file_source: tls.key
    cert_file_source: tls.crt
    cert_params:
      days_valid: 3650
      CN: {{ grains.fqdn }}
  config:
    env_file: /etc/default/nomad
    source: nomad.json.jinja
    # Enable or disable showing of the diff when updating config file
    show_changes: true
    data:
      data_dir: /var/lib/nomad
      bind_addr: 0.0.0.0
      server:
        enabled: false
      client:
        enabled: true
        servers:
          - 127.0.0.1
      log_level: INFO
      # Nomad support go-sockaddr templates for addresses
      # https://godoc.org/github.com/hashicorp/go-sockaddr/template
      # client_addr: "{% raw %}{{ GetPrivateIP }}{% endraw %}"
      # bind_addr: "{% raw %}{{ GetPublicIP }}{% endraw %}"

---
# Nomad server, you need three of them, you can probaly start just one with `bootstrap_expect: 1`
# but it will loose leadership after restart
# If you have Consul agent running alongside with Nomad, and Nomad is able to communicate with it
# i.e. no ACL enabled on Consul side or ACL is properly configured, than Nomad will register itself in Consul
# and all servers will find each other automagically
nomad:
  config:
    data:
      server:
        enabled: true
        bootstrap_expect: 3

---
# Enable HTTPS with self signed certificate
nomad:
  tls:
    self_signed: true
    cert_params:
      subjectAltName: DNS:nomad.example.com, DNS:another.name.tld
  config:
    data:
      tls:
        # Enable TLS for HTTP
        http: true
        # Enable TLS for RPC
        rpc : true
        # it's mandatory to provide path to key and certificate, otherwise certificate will not be issued
        key_file: /etc/nomad.d/tls.key
        cert_file: /etc/nomad.d/tls.crt

---
# Enable HTTPS with provided local (on minion) certificate
nomad:
  tls:
    self_signed: false
    key_file_source: /etc/pki/api/nomad/myminion.key
    cert_file_source: /etc/pki/api/nomad/myminion.crt
  config:
    data:
      tls:
        # Enable TLS for HTTP
        http: true
        # Enable TLS for RPC
        rpc : true
        # it's mandatory to provide path to key and certificate,
        # provided key and cert will be copied to key_file and cert_file respectively
        key_file: /etc/nomad.d/tls.key
        cert_file: /etc/nomad.d/tls.crt
